// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: docs.proto

package docs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DocsService_CreateDocument_FullMethodName   = "/docs.DocsService/CreateDocument"
	DocsService_GetDocument_FullMethodName      = "/docs.DocsService/GetDocument"
	DocsService_GetAllDocuments_FullMethodName  = "/docs.DocsService/GetAllDocuments"
	DocsService_UpdateDocument_FullMethodName   = "/docs.DocsService/UpdateDocument"
	DocsService_DeleteDocument_FullMethodName   = "/docs.DocsService/DeleteDocument"
	DocsService_ShareDocument_FullMethodName    = "/docs.DocsService/ShareDocument"
	DocsService_SearchDocument_FullMethodName   = "/docs.DocsService/SearchDocument"
	DocsService_GetAllVersions_FullMethodName   = "/docs.DocsService/GetAllVersions"
	DocsService_RestoreVersion_FullMethodName   = "/docs.DocsService/RestoreVersion"
	DocsService_DownloadDocument_FullMethodName = "/docs.DocsService/DownloadDocument"
)

// DocsServiceClient is the client API for DocsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsServiceClient interface {
	CreateDocument(ctx context.Context, in *CreateDocumentReq, opts ...grpc.CallOption) (*CreateDocumentRes, error)
	GetDocument(ctx context.Context, in *GetDocumentReq, opts ...grpc.CallOption) (*GetDocumentRes, error)
	GetAllDocuments(ctx context.Context, in *GetAllDocumentsReq, opts ...grpc.CallOption) (*GetAllDocumentsRes, error)
	UpdateDocument(ctx context.Context, in *UpdateDocumentReq, opts ...grpc.CallOption) (*UpdateDocumentRes, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentReq, opts ...grpc.CallOption) (*DeleteDocumentRes, error)
	ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentRes, error)
	SearchDocument(ctx context.Context, in *SearchDocumentReq, opts ...grpc.CallOption) (*SearchDocumentRes, error)
	GetAllVersions(ctx context.Context, in *GetAllVersionsReq, opts ...grpc.CallOption) (*GetAllVersionsRes, error)
	RestoreVersion(ctx context.Context, in *RestoreVersionReq, opts ...grpc.CallOption) (*RestoreVersionRes, error)
	DownloadDocument(ctx context.Context, in *DownloadDocumentReq, opts ...grpc.CallOption) (*DownloadDocumentRes, error)
}

type docsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsServiceClient(cc grpc.ClientConnInterface) DocsServiceClient {
	return &docsServiceClient{cc}
}

func (c *docsServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentReq, opts ...grpc.CallOption) (*CreateDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_CreateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) GetDocument(ctx context.Context, in *GetDocumentReq, opts ...grpc.CallOption) (*GetDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) GetAllDocuments(ctx context.Context, in *GetAllDocumentsReq, opts ...grpc.CallOption) (*GetAllDocumentsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllDocumentsRes)
	err := c.cc.Invoke(ctx, DocsService_GetAllDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentReq, opts ...grpc.CallOption) (*UpdateDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentReq, opts ...grpc.CallOption) (*DeleteDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentReq, opts ...grpc.CallOption) (*ShareDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_ShareDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) SearchDocument(ctx context.Context, in *SearchDocumentReq, opts ...grpc.CallOption) (*SearchDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_SearchDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) GetAllVersions(ctx context.Context, in *GetAllVersionsReq, opts ...grpc.CallOption) (*GetAllVersionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllVersionsRes)
	err := c.cc.Invoke(ctx, DocsService_GetAllVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) RestoreVersion(ctx context.Context, in *RestoreVersionReq, opts ...grpc.CallOption) (*RestoreVersionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreVersionRes)
	err := c.cc.Invoke(ctx, DocsService_RestoreVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsServiceClient) DownloadDocument(ctx context.Context, in *DownloadDocumentReq, opts ...grpc.CallOption) (*DownloadDocumentRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadDocumentRes)
	err := c.cc.Invoke(ctx, DocsService_DownloadDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocsServiceServer is the server API for DocsService service.
// All implementations must embed UnimplementedDocsServiceServer
// for forward compatibility
type DocsServiceServer interface {
	CreateDocument(context.Context, *CreateDocumentReq) (*CreateDocumentRes, error)
	GetDocument(context.Context, *GetDocumentReq) (*GetDocumentRes, error)
	GetAllDocuments(context.Context, *GetAllDocumentsReq) (*GetAllDocumentsRes, error)
	UpdateDocument(context.Context, *UpdateDocumentReq) (*UpdateDocumentRes, error)
	DeleteDocument(context.Context, *DeleteDocumentReq) (*DeleteDocumentRes, error)
	ShareDocument(context.Context, *ShareDocumentReq) (*ShareDocumentRes, error)
	SearchDocument(context.Context, *SearchDocumentReq) (*SearchDocumentRes, error)
	GetAllVersions(context.Context, *GetAllVersionsReq) (*GetAllVersionsRes, error)
	RestoreVersion(context.Context, *RestoreVersionReq) (*RestoreVersionRes, error)
	DownloadDocument(context.Context, *DownloadDocumentReq) (*DownloadDocumentRes, error)
	mustEmbedUnimplementedDocsServiceServer()
}

// UnimplementedDocsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocsServiceServer struct {
}

func (UnimplementedDocsServiceServer) CreateDocument(context.Context, *CreateDocumentReq) (*CreateDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedDocsServiceServer) GetDocument(context.Context, *GetDocumentReq) (*GetDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocsServiceServer) GetAllDocuments(context.Context, *GetAllDocumentsReq) (*GetAllDocumentsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDocuments not implemented")
}
func (UnimplementedDocsServiceServer) UpdateDocument(context.Context, *UpdateDocumentReq) (*UpdateDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocsServiceServer) DeleteDocument(context.Context, *DeleteDocumentReq) (*DeleteDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocsServiceServer) ShareDocument(context.Context, *ShareDocumentReq) (*ShareDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (UnimplementedDocsServiceServer) SearchDocument(context.Context, *SearchDocumentReq) (*SearchDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocument not implemented")
}
func (UnimplementedDocsServiceServer) GetAllVersions(context.Context, *GetAllVersionsReq) (*GetAllVersionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVersions not implemented")
}
func (UnimplementedDocsServiceServer) RestoreVersion(context.Context, *RestoreVersionReq) (*RestoreVersionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreVersion not implemented")
}
func (UnimplementedDocsServiceServer) DownloadDocument(context.Context, *DownloadDocumentReq) (*DownloadDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDocument not implemented")
}
func (UnimplementedDocsServiceServer) mustEmbedUnimplementedDocsServiceServer() {}

// UnsafeDocsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsServiceServer will
// result in compilation errors.
type UnsafeDocsServiceServer interface {
	mustEmbedUnimplementedDocsServiceServer()
}

func RegisterDocsServiceServer(s grpc.ServiceRegistrar, srv DocsServiceServer) {
	s.RegisterService(&DocsService_ServiceDesc, srv)
}

func _DocsService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_CreateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).CreateDocument(ctx, req.(*CreateDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).GetDocument(ctx, req.(*GetDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_GetAllDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDocumentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).GetAllDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_GetAllDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).GetAllDocuments(ctx, req.(*GetAllDocumentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_ShareDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).ShareDocument(ctx, req.(*ShareDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_SearchDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).SearchDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_SearchDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).SearchDocument(ctx, req.(*SearchDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_GetAllVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).GetAllVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_GetAllVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).GetAllVersions(ctx, req.(*GetAllVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_RestoreVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).RestoreVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_RestoreVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).RestoreVersion(ctx, req.(*RestoreVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocsService_DownloadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).DownloadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocsService_DownloadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).DownloadDocument(ctx, req.(*DownloadDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DocsService_ServiceDesc is the grpc.ServiceDesc for DocsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docs.DocsService",
	HandlerType: (*DocsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _DocsService_CreateDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocsService_GetDocument_Handler,
		},
		{
			MethodName: "GetAllDocuments",
			Handler:    _DocsService_GetAllDocuments_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DocsService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocsService_DeleteDocument_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _DocsService_ShareDocument_Handler,
		},
		{
			MethodName: "SearchDocument",
			Handler:    _DocsService_SearchDocument_Handler,
		},
		{
			MethodName: "GetAllVersions",
			Handler:    _DocsService_GetAllVersions_Handler,
		},
		{
			MethodName: "RestoreVersion",
			Handler:    _DocsService_RestoreVersion_Handler,
		},
		{
			MethodName: "DownloadDocument",
			Handler:    _DocsService_DownloadDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs.proto",
}
